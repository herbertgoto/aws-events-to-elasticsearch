---
AWSTemplateFormatVersion: "2010-09-09"
Description: This stack deploys the AWS events health monitor

Parameters:

  UserPoolName:
    Type: String
    Description: The name for the Cognito User Pool.

  UserPoolDomain:
    Type: String
    Description: The name for the domain of the Cognito User Pool.

  IdentityPoolName:
    Type: String
    Description: The name for the Cognito Identity Pool.

Resources:

  ESCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AutoVerifiedAttributes: 
        - email
      AccountRecoverySetting: 
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      UsernameAttributes: 
        - email
      UsernameConfiguration: 
        CaseSensitive: False
      UserPoolName: !Ref UserPoolName
      VerificationMessageTemplate: 
        DefaultEmailOption: CONFIRM_WITH_CODE

  ESCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: ESCognitoUserPool
    Properties: 
      Domain: !Ref UserPoolDomain
      UserPoolId: !Ref ESCognitoUserPool

  ESCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties: 
      AllowUnauthenticatedIdentities: True
      IdentityPoolName: !Ref IdentityPoolName
      AllowClassicFlow: False

  ESIdentityPoolRolesAtt:
    Type: AWS::Cognito::IdentityPoolRoleAttachment 
    DependsOn: 
    - ESCognitoIdentityPool
    - AuthenticatedRole
    - UnAuthenticatedRole
    Properties: 
      IdentityPoolId: !Ref ESCognitoIdentityPool
      Roles: 
        "authenticated": !GetAtt AuthenticatedRole.Arn 
        "unauthenticated": !GetAtt UnAuthenticatedRole.Arn 

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref ESCognitoIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": 'authenticated'
      Policies:
        - PolicyName: AuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
      Path:
        Fn::Sub: /

  UnAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref ESCognitoIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": 'unauthenticated'
      Policies:
        - PolicyName: AuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: '*'
      Path:
        Fn::Sub: /

#  EventTopicPolicy:
#    Type: 'AWS::SNS::TopicPolicy'
#    Properties:
#      PolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: events.amazonaws.com
#            Action: 'sns:Publish'
#            Resource: '*'
#      Topics:
#        - !Ref SNSTopicTrigger

#  LambdaChangeStreamsRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          -
#            Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
#      Policies:
#        - PolicyName: PublishSNS
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - sns:Publish
#                Resource: !Ref SNSTopicAlert
#        - PolicyName: SecretsManager
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - secretsmanager:GetSecretValue
#                Resource: !Ref DocDBSecret
#        - PolicyName: S3Access
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - s3:GetObject
#                Resource: 'arn:aws:s3:::rds-downloads/rds-combined-ca-bundle.pem'
#      Path:
#        Fn::Sub: /

#  ElasticSearchSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties: 
#      GroupDescription: Amazon DocumentDB Security Group
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#         - IpProtocol: tcp
#           CidrIp: 10.0.0.0/16
#           FromPort: 443
#           ToPort: 443

#  ElasticsearchSLR:
#    Type: 'AWS::IAM::ServiceLinkedRole'
#    Properties:
#      AWSServiceName: es.amazonaws.com

#  ElasticsearchDomain:
#    Type: AWS::Elasticsearch::Domain
#    DependsOn: ElasticsearchSLR
#    Properties:
#      ElasticsearchVersion: "7.4"
#      ElasticsearchClusterConfig:
#        InstanceCount: "1"
#        InstanceType: "r5.large.elasticsearch"
#      EBSOptions:
#        EBSEnabled: true
#        Iops: 0
#        VolumeSize: 20
#        VolumeType: "gp2"
#      AccessPolicies:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              AWS: '*'
#            Action: 'es:*'
#            Resource: 
#              !Join
#                - '' 
#                - - 'arn:aws:es:'
#                  - !Ref "AWS::Region"
#                  - ':'
#                  - !Ref "AWS::AccountId"
#                  - ':domain/*/*'
#      VPCOptions:
#        SubnetIds:
#          - Ref: PrivateSubnetOne
#        SecurityGroupIds:
#          - Ref: ElasticSearchSecurityGroup
  
  S3DLQ:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    
Outputs:
  #ElasticsearchDomainArn:
  #  Value: !GetAtt ElasticsearchDomain.Arn
  #ElasticsearchDomainEndpoint:
  #  Value: !GetAtt ElasticsearchDomain.DomainEndpoint
  #EventBridgeRule:
  #  Value: !Ref ScheduledRule
  S3BucketName:
    Value: !Ref S3DLQ
  UnAuthenticatedRole:
    Value: !GetAtt UnAuthenticatedRole.Arn
  AuthenticatedRole:
    Value: !GetAtt AuthenticatedRole.Arn
  ESCognitoUserPool:
    Value: !GetAtt ESCognitoUserPool.Arn
  ESCognitoIdentityPool:
    Value: !Ref ESCognitoIdentityPool
