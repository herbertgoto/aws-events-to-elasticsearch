---
AWSTemplateFormatVersion: "2010-09-09"
Description: This stack deploys the AWS events health monitor

Parameters:

  UserPoolDomain:
    Type: String
    Description: >-
      The name for the domain of the Cognito User Pool.

  LambdaCodeBucket:
    Type: String
    Description: >-
      The name of the bucket where Lambda Code resides. 
  
  AWSServices:
    Type: String
    AllowedPattern: '^"aws.\w*"(,"aws.\w*")*$|(^\s*)$'
    Description: >-
      List of comma-separated and double-quoted AWS services 
      for which events will be ingested to Amazon Elasticsearch. 

Resources:

  ESCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AutoVerifiedAttributes: 
        - email
      AccountRecoverySetting: 
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      UsernameAttributes: 
        - email
      UsernameConfiguration: 
        CaseSensitive: False
      VerificationMessageTemplate: 
        DefaultEmailOption: CONFIRM_WITH_CODE

  ESCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn: ESCognitoUserPool
    Properties: 
      Domain: !Ref UserPoolDomain
      UserPoolId: !Ref ESCognitoUserPool

  ESCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties: 
      AllowUnauthenticatedIdentities: True
      AllowClassicFlow: False

  ESIdentityPoolRolesAtt:
    Type: AWS::Cognito::IdentityPoolRoleAttachment 
    DependsOn: 
    - ESCognitoIdentityPool
    - AuthenticatedRole
    - UnAuthenticatedRole
    Properties: 
      IdentityPoolId: !Ref ESCognitoIdentityPool
      Roles: 
        "authenticated": !GetAtt AuthenticatedRole.Arn 
        "unauthenticated": !GetAtt UnAuthenticatedRole.Arn 

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref ESCognitoIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": 'authenticated'
      Policies:
        - PolicyName: AuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
      Path:
        Fn::Sub: /

  UnAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref ESCognitoIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": 'unauthenticated'
      Policies:
        - PolicyName: AuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: '*'
      Path:
        Fn::Sub: /

  AWSEventsRule: 
    Type: AWS::Events::Rule
    DependsOn: EventsQueue
    Properties: 
      Description: "Rule to process AWS events"
      EventPattern: !Join
        - ''
        - - '{"source":['
          - !Ref AWSServices
          - ']}'
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - EventsQueue
              - Arn
          Id: "TargetSQS"

  EventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: '*'
      Queues: 
        - !Ref EventsQueue

  SNSTopicAlert:
    Type: AWS::SNS::Topic

  DeathLetterQueue: 
    Type: AWS::SQS::Queue

  EventsQueue: 
    Type: AWS::SQS::Queue
    DependsOn: DeathLetterQueue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeathLetterQueue.Arn
        maxReceiveCount: 10

  LambdaDLQToS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PublishSNS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopicAlert
        - PolicyName: ReadSQS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt DeathLetterQueue.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !GetAtt S3DLQ.Arn
      Path:
        Fn::Sub: /

  LambdaESEventsIngesterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PublishSNS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopicAlert
        - PolicyName: ReadSQS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt EventsQueue.Arn
      Path:
        Fn::Sub: /

  DQLLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: dlqLambdaFunction.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaDLQToS3Role.Arn 
      Runtime: python3.7
      Description: "AWS Lambda used to send un-processed events in a DLQ to S3"
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3DLQ
          BUCKET_PATH: dlq 
          SNS_TOPIC_ARN_ALERT: !Ref SNSTopicAlert
      FunctionName: events-processing-dlq-to-s3
      MemorySize: 128
      Timeout: 15

  EventProcessingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeBucket 
        S3Key: eventsLambdaFunction.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaESEventsIngesterRole.Arn 
      Runtime: python3.7
      Description: "AWS Lambda used to ingest AWS Events from EventBridge to Amazon ElasticSearch"
      Environment:
        Variables:
          ELASTICSEARCH_URI: 
            !Join
                - '' 
                - - 'https://'
                  - !GetAtt ElasticsearchDomain.DomainEndpoint
                  - ':443'
          SNS_TOPIC_ARN_ALERT: !Ref SNSTopicAlert
      FunctionName: events-processing-to-aes
      MemorySize: 128
      Timeout: 15
  
  DLQTriggerLambda:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !GetAtt DQLLambdaFunction.Arn
      EventSourceArn: !GetAtt DeathLetterQueue.Arn

  QueueTriggerEventsLambda:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !GetAtt EventProcessingLambdaFunction.Arn
      EventSourceArn: !GetAtt EventsQueue.Arn

  CognitoAccessForAmazonES:
    Type: AWS::IAM::Role
    Properties:
      Description: Amazon Elasticsearch role for Kibana authentication.
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - es.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      Path:
        Fn::Sub: /service-role/

  ElasticsearchSLR:
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: es.amazonaws.com

  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    DependsOn: 
    - ElasticsearchSLR
    - ESCognitoUserPool
    - ESIdentityPoolRolesAtt
    Properties:
      ElasticsearchVersion: '7.9'
      ElasticsearchClusterConfig:
        DedicatedMasterCount: 3
        DedicatedMasterEnabled: True
        DedicatedMasterType: 'c5.large.elasticsearch'
        InstanceCount: 3
        InstanceType: 'r5.large.elasticsearch'
        ZoneAwarenessEnabled: True
        ZoneAwarenessConfig:
          AvailabilityZoneCount: 3
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 50
        VolumeType: 'gp2'
      DomainEndpointOptions:
        EnforceHTTPS: True
      EncryptionAtRestOptions:
        Enabled: True
      NodeToNodeEncryptionOptions:
         Enabled: True
      CognitoOptions:
        Enabled: True
        IdentityPoolId: !Ref ESCognitoIdentityPool
        RoleArn: !GetAtt CognitoAccessForAmazonES.Arn
        UserPoolId: !Ref ESCognitoUserPool
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                - !GetAtt AuthenticatedRole.Arn
                - !GetAtt LambdaESEventsIngesterRole.Arn
            Action: 'es:ESHttp*'
            Resource: 
              !Join
                - '' 
                - - 'arn:aws:es:'
                  - !Ref "AWS::Region"
                  - ':'
                  - !Ref "AWS::AccountId"
                  - ':domain/*/*'
  
  S3DLQ:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    
Outputs:
  ElasticsearchDomainArn:
    Value: !GetAtt ElasticsearchDomain.Arn
  ElasticsearchDomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
  S3BucketName:
    Value: !Ref S3DLQ
  UnAuthenticatedRole:
    Value: !GetAtt UnAuthenticatedRole.Arn
  AuthenticatedRole:
    Value: !GetAtt AuthenticatedRole.Arn
  LambdaDLQToS3Role:
    Value: !GetAtt LambdaDLQToS3Role.Arn
  LambdaESEventsIngesterRole:
    Value: !GetAtt LambdaESEventsIngesterRole.Arn
  ESCognitoUserPool:
    Value: !GetAtt ESCognitoUserPool.Arn
  ESCognitoIdentityPool:
    Value: !Ref ESCognitoIdentityPool
  SNSTopicAlert:
    Value: !Ref SNSTopicAlert
